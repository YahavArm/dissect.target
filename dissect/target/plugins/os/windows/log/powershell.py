from __future__ import annotations

from typing import TYPE_CHECKING

from dissect.target.exceptions import UnsupportedPluginError
from dissect.target.helpers.record import TargetRecordDescriptor
from dissect.target.plugin import Plugin, export

if TYPE_CHECKING:
    from collections.abc import Iterator

    from dissect.target.target import Target

PowershellScriptblockRecord = TargetRecordDescriptor(
    "filesystem/windows/logs/powershell/scriptblock",
    [
        ("datetime", "ts"),
        ("string", "activity_id"),
        ("string", "scriptblock_id"),
        ("string", "scriptblock"),
        ("uint32[]", "event_record_ids"),
        ("uint32", "pid"),
        ("uint32","tid"),
        ("uint32", "total_messages"),
        ("string", "user_sid"),
        ("boolean", "script_complete"),
        ("path", 'script_path')
    ],
)

class PowershellEvents(Plugin):
    """Plugin for parsing Powershell EVTX related events"""

    LOGS_DIR_PATH = "sysvol/windows/system32/winevt/logs/"
    OPERATIONAL_LOG_PATH = "Microsoft-Windows-PowerShell%4Operational.evtx"

    def __init__(self, target: Target):
        super().__init__(target)
        self.log_path = self.target.fs.path(self.LOGS_DIR_PATH + self.OPERATIONAL_LOG_PATH)

    def check_compatible(self) -> None:
        if not self.log_path.exists():
            raise UnsupportedPluginError("Powershell Operational log was not found")

    @export(record=PowershellScriptblockRecord)
    def scriptblocks(self) -> Iterator[PowershellScriptblockRecord]:
        """Parse PowerShell event log entries with ID 4104, which are generated by Script Block Logging.

        Script Block Logging is a PowerShell feature that logs the contents of all script blocks processed
        by the PowerShell engine, including commands, scripts, functions, and code blocks.
        These events are logged inWindows Event Log (Microsoft-Windows-PowerShell/Operational).
        """
        execution_logs = []
        scriptblock_groups = {}
        events = self.target.evtx(logs_dir = self.LOGS_DIR_PATH, log_file_glob=self.OPERATIONAL_LOG_PATH)
        # Extract only ScriptBlock Events
        execution_logs = [event for event in events if event.EventID == 4104]

        """
            The executed Scriptblocks are broken to multiple events if the size of the block is to large
            to get the entire script, the messages are grouped together and then combined
        """
        for log in execution_logs:
            if log.ScriptBlockId not in scriptblock_groups:
                scriptblock_groups[log.ScriptBlockId] = [log]
            else:
                scriptblock_groups[log.ScriptBlockId].append(log)
        for id, logs in scriptblock_groups.items():
            script_complete = True
            group_msg_total = int(logs[0].MessageTotal)
            event_record_ids = [int(log.EventRecordID) for log in logs]
            if len(logs) < group_msg_total:
                script_complete = False
            full_script = "".join([log.ScriptBlockText for log in logs])
            yield PowershellScriptblockRecord(
                ts=logs[0].ts,
                activity_id=logs[0].Correlation_ActivityID,
                scriptblock_id=id,
                scriptblock=full_script,
                event_record_ids=event_record_ids,
                pid=int(logs[0].Execution_ProcessID),
                tid=int(logs[0].Execution_ThreadID),
                total_messages = group_msg_total,
                user_sid=logs[0].Security_UserID,
                script_complete=script_complete,
                script_path=logs[0].Path
            )

